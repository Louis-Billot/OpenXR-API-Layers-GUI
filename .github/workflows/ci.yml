name: Continuous Integration
on: [push, pull_request]
jobs:
  build:
    name: ${{matrix.os-arch}}/${{matrix.build-type}}
    runs-on: ${{matrix.runs-on}}
    steps:
      - name: Fetch code-signing key
        env:
          CODE_SIGNING_PFX_BASE64: ${{ secrets.CODE_SIGNING_KEY_PFX_BASE64 }}
        id: fetch-key
        if: ${{ (github.repository == 'fredemmott/OpenXR-API-Layers-GUI') && (github.event_name == 'push') && (github.actor == 'fredemmott') }}
        shell: pwsh
        run: |
          $pfxPath="${{runner.temp}}/MyCert.pfx"
          [System.Convert]::FromBase64String($Env:CODE_SIGNING_PFX_BASE64) | Set-Content "$pfxPath" -AsByteStream
          Add-Content $Env:GITHUB_OUTPUT "HAVE_KEY=true"
          Add-Content $Env:GITHUB_OUTPUT "PATH=$pfxPath"
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Make build directory
        run: cmake -E make_directory build
      - uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: "Initialize vcpkg"
        working-directory: build
        run:
          ../third-party/vcpkg/bootstrap-vcpkg.bat
          ../third-party/vcpkg/vcpkg.exe install `
            --binarysource="clear;x-gha,readwrite" `
            --x-install-root=$(Get-Location)/vcpkg_installed
      - name: Configure
        working-directory: build
        run: |
          $args = @()
          if ( "${{steps.fetch-key.outputs.HAVE_KEY}}" -eq "true" ) {
            echo "::notice::Signing build targets"
            $args += "-DSIGNTOOL_KEY_ARGS=/f;${{steps.fetch-key.outputs.PATH}}" `
          } else {
            echo "::warning::Not signing targets"
          }

          cmake .. `
            -A ${{matrix.cmake-arch}} `
            @args
        shell: pwsh
      - name: Compile
        working-directory: build
        run: cmake --build . --parallel --config ${{matrix.build-type}} --verbose
      - name: Install
        working-directory: build
        run: |
          cmake --install . --config ${{matrix.build-type}} --prefix ${{runner.temp}}/install
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ matrix.build-type != 'Debug' }}
        with:
          name: ${{matrix.build-type}}
          path: ${{runner.temp}}/install
    strategy:
      fail-fast: false
      matrix:
        os-arch: [Win32, Win64]
        build-type: [RelWithDebInfo, Debug]
        include:
          - os-arch: Win32
            runs-on: windows-latest
            cmake-arch: Win32
          - os-arch: Win64
            runs-on: windows-latest
            cmake-arch: x64
  combined-zip:
    name: Combine
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: List artifacts
        working-directory: artifacts 
        run: Get-ChildItem -Recurse
      - name: Create combined installation dir
        working-directory: artifacts
        id: install
        run: |
          mkdir ${{runner.temp}}\install
          foreach ($subdir in (Get-ChildItem -Attribute Directory)) {
            xcopy /iqy "$subdir" "${{runner.temp}}\install"
          }
          Get-ChildItem -Recurse ${{runner.temp}}\install
          
          Add-Content $Env:GITHUB_OUTPUT "version=$(Get-Content ${{runner.temp}}/install/version.txt)"
      - name: Upload combined zip
        uses: actions/upload-artifact@v3
        with:
          name: "OpenXR-API-Layers-GUI-v${{steps.install.outputs.version}}"
          path: ${{runner.temp}}/install